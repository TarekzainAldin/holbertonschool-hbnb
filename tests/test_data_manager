# tests/test_data_manager.py

import unittest
from models.user import User
from persistence.data_manager import DataManager

class TestDataManager(unittest.TestCase):
    def setUp(self):
        self.data_manager = DataManager()

    def test_save_user(self):
        user = User(email="test@example.com", first_name="John", last_name="Doe")
        result = self.data_manager.save(user)
        self.assertEqual(result['id'], 1)
        self.assertEqual(len(self.data_manager.users), 1)

    def test_get_user(self):
        user = User(email="test@example.com", first_name="John", last_name="Doe")
        self.data_manager.save(user)
        retrieved_user = self.data_manager.get(1, 'user')
        self.assertIsNotNone(retrieved_user)
        self.assertEqual(retrieved_user.email, "test@example.com")

    def test_update_user(self):
        user = User(email="test@example.com", first_name="John", last_name="Doe")
        self.data_manager.save(user)
        user.first_name = "Jane"
        update_result = self.data_manager.update(user)
        self.assertTrue(update_result)
        updated_user = self.data_manager.get(1, 'user')
        self.assertEqual(updated_user.first_name, "Jane")

    def test_delete_user(self):
        user = User(email="test@example.com", first_name="John", last_name="Doe")
        self.data_manager.save(user)
        delete_result = self.data_manager.delete(1, 'user')
        self.assertTrue(delete_result)
        self.assertEqual(len(self.data_manager.users), 0)

    def test_get_nonexistent_user(self):
        retrieved_user = self.data_manager.get(99, 'user')
        self.assertIsNone(retrieved_user)

    def test_update_nonexistent_user(self):
        user = User(email="test@example.com", first_name="John", last_name="Doe")
        user.id = 99
        update_result = self.data_manager.update(user)
        self.assertFalse(update_result)

    def test_delete_nonexistent_user(self):
        delete_result = self.data_manager.delete(99, 'user')
        self.assertFalse(delete_result)

if __name__ == '__main__':
    unittest.main()
