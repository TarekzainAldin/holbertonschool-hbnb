# hbnb_evolution/tests/test_data_manager.py


import unittest
from persistence.data_manager import DataManager
from models.user import User
from models.place import Place
# Add other imports as necessary

class TestDataManager(unittest.TestCase):
    def setUp(self):
        """Set up test environment"""
        self.data_manager = DataManager()

    def test_save_user(self):
        user = User(email="test@example.com", password="password")
        self.data_manager.save(user)
        retrieved_user = self.data_manager.get(user.id, 'User')
        self.assertEqual(user.email, retrieved_user.email)

    def test_update_user(self):
        user = User(email="test@example.com", password="password")
        self.data_manager.save(user)
        user.email = "new@example.com"
        self.data_manager.update(user)
        retrieved_user = self.data_manager.get(user.id, 'User')
        self.assertEqual(user.email, retrieved_user.email)

    def test_delete_user(self):
        user = User(email="test@example.com", password="password")
        self.data_manager.save(user)
        self.data_manager.delete(user.id, 'User')
        retrieved_user = self.data_manager.get(user.id, 'User')
        self.assertIsNone(retrieved_user)

    # Add more tests for other entity types and methods

if __name__ == '__main__':
    unittest.main()

# import unittest
# from persistence.data_manager import DataManager
# from storage import FileStorage  # Adjust this import based on your storage implementation

# class TestDataManagement(unittest.TestCase):
#     def setUp(self):
#         self.data_manager = DataManager(FileStorage())

#     def test_save_and_get(self):
#         # Write test cases for save and get methods
#         pass

#     def test_update(self):
#         # Write test cases for update method
#         pass

#     def test_delete(self):
#         # Write test cases for delete method
#         pass

# if __name__ == '__main__':
#     unittest.main()
